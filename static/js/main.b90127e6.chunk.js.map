{"version":3,"sources":["Components/UserItem.js","Components/UserList.js","Components/MessageItem.js","Components/MessageList.js","Components/LoginModal.js","App.js","serviceWorker.js","index.js"],"names":["UserItem","className","List","Item","this","props","userName","React","Component","UserList","userList","map","item","index","key","MessageItem","state","create","type","user","dateFormat","time","console","log","date","Date","toLocaleDateString","toLocaleTimeString","setState","event","toUpperCase","hasOwnProperty","message","status","MessageList","messagesEnd","scrollIntoView","behavior","style","maxHeight","messageList","eventPair","JSON","parse","data","float","clear","ref","el","LoginModal","username","password","server","close","login","closeModal","alert","handleChangeServer","target","value","handleChangeUsername","handleChangePassword","Modal","open","isVisible","onOpen","openModal","trigger","Button","color","connected","icon","Icon","name","Header","Content","Form","Field","required","placeholder","onChange","Actions","content","onClick","App","eventList","connection","showModal","token","a","form","FormData","set","axios","post","headers","response","getConnection","addEvent","concat","findUser","li","i","length","eventSource","EventSource","addEventListener","e","ev","filter","val","users","updateMessage","sendMessage","keyCode","append","Grid","celled","columns","divided","stretched","minHeight","Row","Column","width","padded","height","paddingTop","Segment","background","overflowY","onKeyDown","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b90127e6.chunk.js","sourcesContent":["import React from 'react';\nimport './UserList.css';\nimport {List} from 'semantic-ui-react'\n\nclass UserItem extends React.Component {\n  render() {\n    return (\n      <div className=\"UserItem\">\n        <List.Item>{this.props.userName}</List.Item>\n      </div>\n    );\n  }\n}\n\nexport default UserItem;\n","import React from 'react';\nimport './UserList.css';\nimport UserItem from './UserItem';\nimport {List} from 'semantic-ui-react';\n\nclass UserList extends React.Component {\n  render() {\n    return (\n      <div className=\"UserList\">\n        <h1>User List</h1>\n        <List>\n          {\n            this.props.userList.map((item, index) => (\n              <UserItem key={index} userName={item}/>\n            ))\n          }\n        </List>\n      </div>\n    );\n  }\n}\n\nexport default UserList;\n","import React from 'react';\nimport {List} from 'semantic-ui-react'\n\nclass MessageItem extends React.Component {\n  state ={\n    create: \"\",\n    type: \"\",\n    user: \"\",\n  }\n\n  dateFormat = (time) =>{\n    console.log(\"TIME\" + time);\n    let date = new Date(time * 1000);\n    return date.toLocaleDateString(\"en-US\") + \" \" + date.toLocaleTimeString(\"en-US\");\n  }\n\n  componentDidMount(){\n    this.setState({\n      create: this.dateFormat(this.props.event['created']),\n      type: this.props.type === \"Message\" ? \"\" : this.props.type.toUpperCase() + \":\",\n      user: this.props.event.hasOwnProperty('user') ? \" (\" + this.props.event.user + \")\" : \"\",\n      message: this.props.event.hasOwnProperty('message') ? \" \" + this.props.event.message : \"\",\n      status: this.props.event.hasOwnProperty('status') ? \" \" +  this.props.event.status : \"\",\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"UserItem\">\n        <List.Item>{this.state.create + \" \" + this.state.type +  this.state.user + this.state.message + this.state.status}</List.Item>\n      </div>\n    );\n  }\n}\n\nexport default MessageItem;\n","import React from 'react';\nimport './UserList.css';\nimport MessageItem from './MessageItem';\nimport {List} from 'semantic-ui-react';\n\nclass MessageList extends React.Component {\n  componentDidUpdate(){\n    this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n  }\n\n  render() {\n    return (\n      <div className=\"MessageList\">\n        <h1>Messages</h1>\n        <div style={{maxHeight: '100%'}}>\n          <List>\n              {\n              this.props.messageList.map((eventPair, index) => (\n                <MessageItem key={index} type={eventPair[0]} event={JSON.parse(eventPair[1].data)}/>\n              ))\n            }\n          </List>\n        </div>\n        <div style={{ float:\"left\", clear: \"both\" }}\n             ref={(el) => { this.messagesEnd = el; }} />\n      </div>\n    );\n  }\n}\n\nexport default MessageList;\n","import React, { Component } from 'react'\nimport { Form, Button, Icon, Modal } from 'semantic-ui-react'\n\nclass LoginModal extends Component {\n  state = { \n    username: \"\",\n    password: \"\",\n    server: \"http://chat.cs291.com\",\n  }\n\n  close = () => {\n    if(!(this.state.username === \"\" || this.state.password === \"\")){\n      if(this.props.login(this.state.server, this.state.username, this.state.password)){\n        this.props.closeModal();\n      }\n    }else{\n      alert(\"Please enter a valid username and password\");\n    }\n  }\n\n  handleChangeServer= (event) => {\n    this.setState({server: event.target.value});\n  }\n  handleChangeUsername = (event) => {\n    this.setState({username: event.target.value});\n  }\n  handleChangePassword = (event) => {\n    this.setState({password: event.target.value});\n  }\n\n  render() {\n    return (\n      <Modal\n        open={this.props.isVisible}\n        onOpen={this.props.openModal}\n        trigger={\n          <Button color={this.props.connected ? 'green' : 'red'} icon>\n            Login <Icon name='check' />\n          </Button>\n        }\n      >\n        <Modal.Header>Login</Modal.Header>\n        <Modal.Content>\n          <Form>\n            <Form.Field \n              required             \n            >\n              <input placeholder='Server Url' onChange={this.handleChangeServer} value={this.state.server}/>\n            </Form.Field>\n            <Form.Field \n              required             \n            >\n              <input placeholder='Username' onChange={this.handleChangeUsername} value={this.state.username}/>\n            </Form.Field>\n            <Form.Field \n            required\n            >\n              <input type=\"password\" placeholder='Password' onChange={this.handleChangePassword} value={this.state.password}/>\n            </Form.Field>\n          </Form>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button icon='check' content='Login' onClick={this.close} />\n        </Modal.Actions>\n      </Modal>\n    )\n  }\n}\n\nexport default LoginModal;","import React from 'react';\nimport UserList from './Components/UserList';\nimport MessageList from './Components/MessageList'\nimport './App.css';\nimport { Segment, Grid, Form } from 'semantic-ui-react';\nimport LoginModal from  './Components/LoginModal';\nimport axios from 'axios';\n\nclass App extends React.Component{\n  state = {\n    userList: [],\n    eventList: [],\n    username: \"\",\n    password: \"\",\n    server: \"\",\n    connection:  null,\n    showModal: true,\n    message: \"\",\n    token: \"\",\n  }\n\n  openModal = () =>{\n    this.setState({showModal: true});\n  }\n  closeModal = () =>{\n    this.setState({showModal: false});\n  }\n\n  login = async (server,  username, password) => {\n    if(this.state.server === server && \n      this.state.username === username &&\n      this.state.password === password){\n        return true;\n    }\n\n    this.setState({\n      server: server,\n      username: username, \n      password: password,\n    });\n\n    const form = new FormData();\n    form.set('username', username);\n    form.set('password', password);\n\n    const response = await axios.post(\n      server + '/login',\n      form,\n      {headers: {}},\n    );\n\n    if(response.status  !== 201){\n      alert(\"Issue connecting to server\");\n      return false;\n    }\n    this.setState({token: response.data.token});\n    this.getConnection(response.data.token);\n    return true;\n  }\n\n  addEvent = (type, event) => {\n    this.setState({\n      eventList: this.state.eventList.concat([[type, event]]),\n    });\n  }\n\n  findUser = (li, target) => {\n    for(let i = 0; i < li.length; i++){\n      if(target === li[i]){\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  getConnection = async  (token) => {\n    const eventSource = new EventSource(this.state.server + '/stream/' + token);\n\n    this.setState({connection: eventSource});\n    eventSource.addEventListener('Disconnect', (e) =>{\n      this.state.connection.close();\n      alert(\"Disconnect: You have logged in from another location.\");\n      this.setState({\n        eventList: [],\n        userList: [],\n        username: \"\",\n        password: \"\",\n        server: \"\",\n        connection:  null,\n        showModal: true,\n        message: \"\",\n        token: \"\",\n      });\n      this.openModal();\n    });\n\n    eventSource.addEventListener('Join', (e) =>{\n      this.addEvent('Join', e);\n      this.setState({\n        userList: this.state.userList.concat([JSON.parse(e.data).user]),\n      });\n    });\n\n    eventSource.addEventListener('Message', (e) =>{\n      this.addEvent('Message', e);\n    });\n\n    eventSource.addEventListener('Part', (e) =>{\n      this.addEvent('Part', e);\n      let ev = JSON.parse(e.data);\n      this.setState({\n        userList: this.state.userList.filter((val) =>{\n          return val !== ev.user;\n        }),\n      });\n    });\n    \n    eventSource.addEventListener('ServerStatus', (e) =>{\n      this.addEvent('ServerStatus', e);\n    });\n\n    eventSource.addEventListener('Users', (e) =>{\n      this.setState({userList: JSON.parse(e.data).users});\n    });\n\n    eventSource.addEventListener('error', (e) =>{\n      alert(e);\n    });\n  }\n\n  updateMessage= (event) => {\n    this.setState({message: event.target.value});\n  }\n\n  sendMessage = (event) => {\n    if(event.keyCode === 13 && this.state.message !== \"\" && this.state.token !==  \"\" && this.state.server !== \"\"){\n      let form = new FormData();\n      form.append(\"message\", this.state.message);\n      axios.post(this.state.server + '/message', \n      form, {\n        headers: {\n          'Authorization': \"Bearer \" + this.state.token,\n        },\n      },);\n      this.setState({message: \"\"});\n    }\n  }\n\n  render(){\n    return (\n      <div className=\"App\" style={{maxHeight: '100vh'}}>\n        <Grid celled style={{maxHeight: '100vh'}}>\n          <Grid columns={2} divided stretched style={{minHeight: '100vh', maxHeight: '100vh'}}>\n            <Grid.Row style={{maxHeight: '100vh'}}>\n              <Grid.Column width={3} style={{maxHeight: '100vh'}}>\n                <Grid columns={1} padded>\n                  <Grid.Row style={{height: '10%'}}>\n                    <LoginModal \n                    openModal={this.openModal} \n                    closeModal={this.closeModal} \n                    login={this.login} \n                    isVisible={this.state.showModal}\n                    connected={this.state.connection != null}/>\n                  </Grid.Row>\n                  <Grid.Row style={{height: '80%', paddingTop: '3'}}>\n                    <UserList userList={this.state.userList}/>\n                  </Grid.Row>\n                </Grid>\n              </Grid.Column>\n              <Grid.Column width={13} style={{maxHeight: '100vh'}}>\n                <Grid.Row stretched style={{height: '75vh'}}>\n                  <Segment style={{background: \"gray\" , overflowY: \"scroll\" , height: '75vh'}}>\n                    <MessageList messageList={this.state.eventList} />\n                  </Segment>\n                </Grid.Row>\n                <Grid.Row style={{height: '5vh'}}>\n                  <Form>\n                    <Form.Field>\n                      <input placeholder='Send a message' value={this.state.message} onChange={this.updateMessage} onKeyDown={this.sendMessage}/>\n                    </Form.Field>\n                  </Form>\n                </Grid.Row>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js'\nimport * as serviceWorker from './serviceWorker';\n\n// ========================================\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}